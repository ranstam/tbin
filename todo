#!/bin/bash

###############################################################
# User settings                                               #
###############################################################
# Database (will be created if it doesn't exist)              #
db="/home/ranstam/Sync/todo/todo.db"                          #
# command and parameters for the default output (see --help)  #
cmd="-lssc"                                                   #
par="REV"                                                     #
###############################################################

# Requirements for running this program
# - bash
# - awk
# - sqlite3
# - Pushover account (for push reminders)

#####################################################
# If the database doesn't exist, it will be created #       
#####################################################

if [ ! -e "$db" ]; then
    sqlite3 $db 'CREATE TABLE tasks (
                    id       INTEGER      PRIMARY KEY AUTOINCREMENT
                                          NOT NULL,
                    task     VARCHAR (40) NOT NULL,
                    due      DATE         NOT NULL,
                    project  VARCHAR (20) NOT NULL,
                    context  VARCHAR (20) NOT NULL,
                    done     INTEGER      DEFAULT (0) 
                                          NOT NULL,
                    enclosed BLOB,
                    name     VARCHAR (20),
                    regdate  DATE,
                    compdate DATE
                 );'
fi 

#############
# Functions #
#############

all_tasks () {
    echo
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done="'$done'" AND due>="'$startdate'"  AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    echo
}

project_tasks () {
    echo
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done="'$done'" AND project="'$project'" AND due>="'$startdate'"  AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    echo
}

context_tasks () {
    echo
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done="'$done'" AND context="'$context'" AND due>="'$startdate'"  AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    echo
}

found_tasks () {
    echo
    printf "%5s %5s %5s %3s %-10s %-20s\n" "id" "done" "week" "day" "due" "task" 
    printf "%5s %5s %5s %3s %-10s %-20s\n" "--" "----" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,done,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks
          	 WHERE task LIKE "'%$find%'"
		 ORDER BY due;' |
    awk -F "|" '{printf "%5s %5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5,$6" ("$7")"}'
    echo
}

########################
# Specify the defaults #       
########################

if [ -z "$1" ]
then
    set -- $cmd $par
fi

#############
# Show help #
#############

if [ $1 == "--help" ] || [ $1 == "-h" ]  
then
    echo
    echo "Usage: todo parameters [if optional]"
    echo
    echo "where the parameters are:"
    echo
    echo " -new [task due project context  (on one line)"
    echo "       filename]                 register new task"
    echo 
    echo " -mod id item value              modify task" 
    echo " -enc id filename                download enclosed file"
    echo " -cmp id                         register completed task"
    echo " -del id                         delete task"
    echo " -fnd criterion                  find task(s)"
    echo " -rem id time                    remind task (at command)"
    echo
    echo " -lsq                            list all queued tasks"
    echo " -lsd [date1] [date2]            list due tasks between date 1 and 2"
    echo " -lsp project [date1] [date2]    list due tasks in project between date 1 and 2"
    echo " -lsc context [date1] [date2]    list due tasks in context between date 1 and 2"
    echo
    echo " -prj                            project summary"
    echo " -ctx                            context summary"
    echo " -lssc context                   list the week's tasks in and out of a context"
    echo " -lssp project                   list the week's tasks in and out of a project"
    echo
    echo " -lsad [date1] [date2]           list done tasks between date 1 and 2"
    echo " -lsap project [date1] [date2]   list done tasks in project between date 1 and 2"
    echo " -lsac context [date1] [date2]   list done tasks in context between date 1 and 2"
    echo

####################################
# Task generation and modification #
####################################

# Register new task
elif [ $1 == "-new" ]
then
    if [ -z "$5" ]
    then
        echo
        echo -n "Task: "
        read task
        echo -n "Due date: "
        read due
        echo -n "Project: "
        read project
        echo -n "Context: "
        read context
        echo -n "Enclose file: "
        read enclosed
    else
        task=$2
	due=$3
	project=$4
	context=$5
	enclosed=$6
    fi
    if [ -n "$6" ] || [ -n "$enclosed" ]
    then
        name=$(basename $enclosed)
    fi
    sqlite3 $db 'INSERT INTO tasks (task,due,project,context,done,enclosed,name,regdate) 
                 VALUES ("'$task'","'$due'","'$project'","'$context'",0,readfile("'$enclosed'"),"'$name'","'$d'");'
    echo

# Delete task
elif [ $1 == "-del" ] && [ -n "$2" ]    
then
    sqlite3 $db 'DELETE FROM tasks 
                 WHERE id="'$2'";'
# Get enclosure
elif [ $1 == "-enc" ] && [ -n "$3" ]   
then
    sqlite3 $db 'SELECT writefile("'$3'",enclosed) 
		 FROM tasks 
		 WHERE id="'$2'"';

# Remind about task (Pushover required)
elif [ $1 == "-rem" ] && [ -n "$2" ]   
then
    sqlite3 $db 'SELECT due, task 
                 FROM tasks
		 WHERE id="'$2'";' > tmp.txt
    echo 'bin/push "' > f1.txt
    echo '"' > f2.txt
    cat f1.txt tmp.txt f2.txt > rem.txt
    sed -i 's/|/ /g' rem.txt
    sed -i ':a;N;$!ba;s/\n/ /g' rem.txt
    at -f rem.txt $3
    rm f1.txt f2.txt tmp.txt rem.txt

# Modify task
elif [ $1 == "-mod" ] && [ -n "$4" ]   
then
    sqlite3 $db 'UPDATE tasks 
                 SET '$3'="'$4'"
		 WHERE id="'$2'";'

# Find tasks
elif [ $1 == "-fnd" ]    
then
    find=$2
    echo
    echo "TASKS MATCHING '"$2"'" 
    echo
    found_tasks $find

# Register task completed
elif [ $1 == "-cmp" ] && [ -n "$2" ]
then
    sqlite3 $db 'UPDATE tasks 
                 SET done=1, compdate="'$d'"
		 WHERE id='$2';'

#################
# Task listings #
#################

# List queued tasks
elif [ $1 == "-lsq" ]    
then
    echo
    echo "QUEUED TASKS ("$d")"
    echo
    printf "%5s %-20s %7s %7s\n" "id" "task" "project" "context" 
    printf "%5s %-20s %7s %7s\n" "--" "----" "-------" "-------" 
    sqlite3 $db 'SELECT id,task,project,context 
                 FROM tasks 
		 WHERE due="" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %-20s %-7s %-7s\n",$1,$2,$3,$4}'
    echo 

# List due tasks between dates
elif [ $1 == "-lsd" ] 
then
    if [ -n "$3" ]
    then
        startdate=$(date --date=$2 +"%Y-%m-%d")
        enddate=$(date --date=$3 +"%Y-%m-%d")    
    elif [ -z "$2" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$2 +"%Y-%m-%d")
    fi
    echo
    echo "TODO BETWEEN "$startdate" AND "$enddate
    done=0
    all_tasks $done $startdate $enddate

# List due tasks for project between dates
elif [ $1 == "-lsp" ] 
then
    project=$2
    if [ -n "$4" ]
    then
        startdate=$(date --date=$3 +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")    
    elif [ -z "$3" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")
    fi
    echo
    echo "TODO IN "$project" BETWEEN "$startdate" AND "$enddate
    echo
    done=0
    project_tasks $done $project $startdate $enddate

# List due tasks for context between dates
elif [ $1 == "-lsc" ] 
then
    context=$2
    if [ -n "$4" ]
    then
        startdate=$(date --date=$3 +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")    
    elif [ -z "$3" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")
    fi
    echo
    echo "TODO IN "$context" BETWEEN "$startdate" AND "$enddate
    echo
    done=0
    context_tasks $done $context $startdate $enddate

# List archived tasks between dates
elif [ $1 == "-lsad" ] 
then
    if [ -n "$3" ]
    then
        startdate=$(date --date=$2 +"%Y-%m-%d")
        enddate=$(date --date=$3 +"%Y-%m-%d")    
    elif [ -z "$2" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$2 +"%Y-%m-%d")
    fi
    echo
    echo "ARCHIVED BETWEEN "$startdate" AND "$enddate
    done=1
    all_tasks $done $startdate $enddate

# List archived tasks for project between dates
elif [ $1 == "-lsap" ] 
then
    project=$2
    if [ -n "$4" ]
    then
        startdate=$(date --date=$3 +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")    
    elif [ -z "$3" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")
    fi
    echo
    echo "ARCHIVED IN "$project" BETWEEN "$startdate" AND "$enddate
    echo
    done=1
    project_tasks $done $project $startdate $enddate

# List archived tasks for context between dates
elif [ $1 == "-lsac" ] 
then
    context=$2
    if [ -n "$4" ]
    then
        startdate=$(date --date=$3 +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")    
    elif [ -z "$3" ]
    then
        startdate=$(date +"%Y-%m-%d")
        enddate="2099-12-31"    
    else
        startdate=$(date +"%Y-%m-%d")
        enddate=$(date --date=$4 +"%Y-%m-%d")
    fi
    echo
    echo "ARCHIVED IN "$context" BETWEEN "$startdate" AND "$enddate
    echo
    done=1
    context_tasks $done $context $startdate $enddate

# List projects
elif [ $1 == "-prj" ]
then
    echo
    echo "PROJECT ("$d")"
    echo
    printf "%2s %-8s %-20s\n" " " "records" "project" 
    printf "%2s %-8s %-20s\n" " " "-------" "-------" 
    sqlite3 $db 'SELECT COUNT(task) AS records, project 
                 FROM tasks 
                 GROUP BY project
                 ORDER BY project;' |
    awk -F "|" '{printf "%2s %-8s %-20s\n"," ",$1,$2}'
    echo

# List contexts
elif [ $1 == "-ctx" ]
then
    echo
    echo "CONTEXT ("$d")"
    echo
    printf "%2s %-8s %-20s\n" " " "records" "context" 
    printf "%2s %-8s %-20s\n" " " "-------" "-------" 
    sqlite3 $db 'SELECT COUNT(task) as records, context
                 FROM tasks
		 GROUP BY context
		 ORDER BY context;' |
    awk -F "|" '{printf "%2s %-8s %-20s\n"," ",$1,$2}'
    echo

# Structured, first one context 
elif [ $1 == "-lssc" ]
then
    enddate=$(date --date=sunday +"%Y-%m-%d")    
    context=$2
    echo
    echo "ALL TASKS IN '$2' DUE THIS WEEK"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done=0 AND context=="'$context'" AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
# then all other task this week
    echo
    echo "ALL TASKS NOT IN '$2' BUT DUE THIS WEEK"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done=0 AND context!="'$context'" AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    echo

# Structured, first one project 
elif [ $1 == "-lssp" ]
then
    enddate=$(date --date=sunday +"%Y-%m-%d")    
    project=$2
    echo
    echo "ALL TASKS IN '$2' DUE THIS WEEK"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done=0 AND project=="'$project'" AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
# then all other task this week
    echo
    echo "ALL TASKS NOT IN '$2' BUT DUE THIS WEEK"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name
                 FROM tasks 
   	         WHERE done=0 AND project!="'$project'" AND due <="'$enddate'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    echo

############
# Finished #
############

else
    echo
    echo "For help, see todo --help"
    echo
fi

