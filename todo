#!/bin/bash

###############################################################
# User settings                                               #
###############################################################
# Database (will be created if it doesn't exist)              #
db="/home/ranstam/Sync/todo/todo.db"                          #
# command and parameters for the default output (see --help)  #
cmd="-lsr"                                                    #
par="REV"                                                     #
###############################################################

# Requirements for running this program
# - bash
# - awk
# - sqlite3
# - Pushover account (for reminders)

#####################################################
# If the database doesn't exist, it will be created #       
#####################################################

if [ ! -e "$db" ]; then
    sqlite3 $db 'CREATE TABLE tasks (                                  
                     id       INTEGER      PRIMARY KEY AUTOINCREMENT 
                                           NOT NULL,                   
                     task     VARCHAR (40) NOT NULL,                   
                     due      DATE         NOT NULL,                   
                     project  VARCHAR (20) NOT NULL,                   
                     context  VARCHAR (20) NOT NULL,                   
                     done     INTEGER      DEFAULT (0)                 
                                           NOT NULL,                   
                     enclosed BLOB,                                    
                     name     VARCHAR (20));'
fi 

##########################################
# Definition of specific time references #
##########################################

# Weekdays and weekend days
d=$(date +"%Y-%m-%d") 
y=$(date --date='yesterday' +"%Y-%m-%d")
m=$(date --date='tomorrow' +"%Y-%m-%d")
we3=$(date --date='next month' +"%Y-%m-%d")

# Mondays
if [ $(date +%u) -eq 1 ]
then
    we1=$(date --date='next saturday' +%Y-%m-%d)
    we2=$(date --date='next sunday' +%Y-%m-%d)
    p=$d
    e=$(date --date='next friday' +"%Y-%m-%d")

# Tuesdays - Thursdays
elif [ $(date +%u) -ge 2 ] && [ $(date +%u) -le 4 ]
then
    we1=$(date --date='next saturday' +%Y-%m-%d)
    we2=$(date --date='next sunday' +%Y-%m-%d)
    p=$(date --date='last monday' +%Y-%m-%d)
    e=$(date --date='next friday' +"%Y-%m-%d")

# Fridays
elif [ $(date +%u) -eq 5 ]
then
    we1=$(date --date='next saturday' +%Y-%m-%d)
    we2=$(date --date='next sunday' +%Y-%m-%d)
    p=$(date --date='last monday' +%Y-%m-%d)
    e=$d

# Saturdays
elif [ $(date +%u) -eq 6 ]
then
    we1=$(date +%Y-%m-%d)
    we2=$(date --date='tomorrow' +%Y-%m-%d)
    p=$(date --date='next monday' +%Y-%m-%d)
    e=$(date --date='next friday' +"%Y-%m-%d")

# Sundays
elif [ $(date +%u) -eq 7 ]
then
    we1=$(date --date='yesterday' +%Y-%m-%d)
    we2=$(date +%Y-%m-%d)
    p=$(date --date='next monday' +%Y-%m-%d)
    e=$(date --date='next friday' +"%Y-%m-%d")
fi

########################
# Specify the defaults #       
########################

if [ -z "$1" ]
then
set -- $cmd $par
fi

#############
# Show help #
#############

if [ $1 == "--help" ]  || [ $1 == "-h" ]  
then
    echo
    echo "Usage: todo -cmd par(s) [if optional]"
    echo
    echo "where par(s) are:"
    echo
    echo " -lst                                       // list tasks due today"
    echo " -lsm                                       // list tasks due tomorrow"
    echo " -lsw                                       // list tasks due this week"
    echo " -lse                                       // list tasks due this weekend"
    echo " -lsn                                       // list tasks with week numbers"
    echo " -lsd                                       // list tasks due next 30 days"
    echo " -lsf [end date]                            // list all due tasks"
    echo " -lsp project                               // list due tasks in project"
    echo " -lsc context                               // list due tasks in context"
    echo " -lsr context                               // structured listing of due tasks"
    echo
    echo " -lsq                                       // list queued tasks"
    echo 
    echo " -lsa                                       // list all archived tasks"
    echo " -lsap project                              // list archived tasks in project"
    echo " -lsac context                              // list archived tasks in context"
    echo
    echo " -new [task due project context filename]   // register new task"
    echo " -mod id item value                         // modify task" 
    echo " -enc id filename                           // download enclosed file"
    echo " -cmp id                                    // register completed task"
    echo " -del id                                    // delete task"
    echo " -fnd criterion                             // find task(s)"
    echo " -rem id time                               // remind about task"
    echo " -prj                                       // project summary"
    echo " -ctx                                       // context summary"
    echo

#################
# Task listings #
#################

# Tasks with week numbers
elif [ $1 == "-lsn" ]
then
    echo
    echo "WEEKS"
    echo
    printf "%5s %3s %5s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %3s %5s %-10s %-20s\n" "--" "----" "---" "---" "----"
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task
                 FROM tasks
		 WHERE done=0
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %5s %-10s %-20s\n",$1,$2,$3,$4,$5}'
    echo 

# Delete task
elif [ $1 == "-del" ] && [ -n "$2" ]    
then
    sqlite3 $db 'DELETE FROM tasks 
                 WHERE id="'$2'";'
# Get enclosure
elif [ $1 == "-enc" ] && [ -n "$3" ]   
then
    sqlite3 $db 'SELECT writefile("'$3'",enclosed) 
		 FROM tasks 
		 WHERE id="'$2'"';

# Remind about task (Pushover required)
elif [ $1 == "-rem" ] && [ -n "$2" ]   
then
    sqlite3 $db 'SELECT due, task 
                 FROM tasks
		 WHERE id="'$2'";' > tmp.txt
    echo 'bin/push "' > f1.txt
    echo '"' > f2.txt
    cat f1.txt tmp.txt f2.txt > rem.txt
    sed -i 's/|/ /g' rem.txt
    sed -i ':a;N;$!ba;s/\n/ /g' rem.txt
    at -f rem.txt $3
    rm f1.txt f2.txt tmp.txt rem.txt

# Modify task
elif [ $1 == "-mod" ] && [ -n "$4" ]   
then
    sqlite3 $db 'UPDATE tasks 
                 SET '$3'="'$4'"
		 WHERE id="'$2'";'

# Find tasks
elif [ $1 == "-fnd" ]    
then
    echo
    echo "TASKS MATCHING '"$2"' ("$d")"
    echo
    printf "%5s %3s %-10s %-20s %12s %12s %12s %3s\n" "id" "day" "due" "task" "project" "context" "enclosed" "done" 
    printf "%5s %3s %-10s %-20s %12s %12s %12s %3s\n" "--" "---" "---" "----" "-------" "-------" "--------" "----"
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,project,context,name,done 
                 FROM tasks 
		 WHERE task LIKE "'%$2%'" OR project LIKE "'%$2%'" OR context LIKE "'%$2%'" OR name LIKE "'%$2%'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s %12s %12s %12s %3s\n",$1,$2,$3,$4,$5,$6,$7,$8}'
    echo 

# List queued tasks
elif [ $1 == "-lsq" ]    
then
    echo
    echo "QUEUED TASKS ("$d")"
    echo
    printf "%5s %-20s %7s %7s\n" "id" "task" "project" "context" 
    printf "%5s %-20s %7s %7s\n" "--" "----" "-------" "-------" 
    sqlite3 $db 'SELECT id,task,project,context 
                 FROM tasks 
		 WHERE due="" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %-20s %-7s %-7s\n",$1,$2,$3,$4}'
    echo 

# List tasks for this week
elif [ $1 == "-lsw" ]    
then
    echo
    echo "TODO THIS WEEK ("$p" - "$e")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----" 
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
		 WHERE done=0 AND due<="'$e'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4"("$5")"}'
    echo 

# List tasks for next 30 days
elif [ $1 == "-lsd" ]    
then
    echo
    echo "TODO NEXT 30 days ("$d" - "$we3")"
    echo
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
		 WHERE done=0 AND due<="'$we3'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5"("$6")"}'
    echo 

# List tasks for this weekend
elif [ $1 == "-lse" ]   
then
    echo
    echo "TODO THIS WEEKEND ("$we1" - "$we2")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----" 
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
		 WHERE done=0 AND due>="'$we1'" AND due<="'$we2'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo 

# List tasks for today
elif [ $1 == "-lst" ] 
then
    echo
    echo "TODO TODAY ("$d")"
    echo
    printf "%5s %3s %-10s %-20s %-10s\n" "id" "day" "due" "task"  
    printf "%5s %3s %-10s %-20s %-10s\n" "--" "---" "---" "----"
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
		 WHERE done=0 AND due<="'$d'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo 

# List tasks for tomorrow
elif [ $1 == "-lsm" ]    
then
    echo
    echo "TODO TOMORROW ("$m")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----" 
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
		 WHERE done=0 AND due<="'$m'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo 

# List future tasks
elif [ $1 == "-lsf" ]    
then
    echo
    echo "TODO IN THE FUTURE ("$d" - "$2")"
    echo
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    if [ -z "$2" ] 
    then
        sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
	             FROM tasks WHERE done=0 
		     ORDER BY due;' |
        awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    else
	sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
	             FROM tasks 
		     WHERE done=0 AND due <="'$2'" 
		     ORDER BY due;' |
        awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5" ("$6")"}'
    fi
    echo 

# List tasks for project
elif [ $1 == "-lsp" ] && [ -n "$2" ]   
then
    echo
    echo "TODO IN "$2
    echo 
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----" 
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
   	         WHERE done=0 AND project="'$2'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo 

# List tasks for context
elif [ $1 == "-lsc" ] && [ -n "$2" ]   
then
    echo
    echo "TODO IN "$2
    echo 
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----" 
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
   	         WHERE done=0 AND context="'$2'" 
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo 

# Register task completed
elif [ $1 == "-cmp" ] && [ -n "$2" ]
then
    sqlite3 $db 'UPDATE tasks 
                 SET done=1 
		 WHERE id='$2';'

# List archived tasks
elif [ $1 == "-lsa" ]
then
    echo
    echo "ARCHIVED TASKS ("$d")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----"  
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
                 WHERE done=1 
	         ORDER BY due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" "$5}'
    echo

# List archived tasks in project
elif [ $1 == "-lsap" ]
then
    echo
    echo "ARCHIVED TASKS ("$d")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----"  
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
	         WHERE done=1 AND project="'$2'" 
		 ORDER by due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo

# List archived tasks in context
elif [ $1 == "-lsac" ]
then
    echo
    echo "ARCHIVED TASKS ("$d")"
    echo
    printf "%5s %3s %-10s %-20s\n" "id" "day" "due" "task" 
    printf "%5s %3s %-10s %-20s\n" "--" "---" "---" "----"  
    sqlite3 $db 'SELECT id,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task,name 
                 FROM tasks 
	         WHERE done=1 AND context="'$2'" 
		 ORDER by due;' |
    awk -F "|" '{printf "%5i %3s %-10s %-20s\n",$1,$2,$3,$4" ("$5")"}'
    echo

# Register new task
elif [ $1 == "-new" ]
then
    if [ -z "$5" ]
    then
        echo
        echo -n "Task: "
        read task
        echo -n "Due date: "
        read due
        echo -n "Project: "
        read project
        echo -n "Context: "
        read context
        echo -n "Enclose file: "
        read enclosed
    else
        task=$2
	due=$3
	project=$4
	context=$5
	enclosed=$6
    fi
    if [ -n "$6" ] || [ -n "$enclosed" ]
    then
        name=$(basename $enclosed)
    fi
    sqlite3 $db 'INSERT INTO tasks (task,due,project,context,done,enclosed,name) 
                 VALUES ("'$task'","'$due'","'$project'","'$context'",0,readfile("'$enclosed'"),"'$name'");'
    echo

# List projects
elif [ $1 == "-prj" ]
then
    echo
    echo "PROJECT ("$d")"
    echo
    printf "%2s %-8s %-20s\n" " " "records" "project" 
    printf "%2s %-8s %-20s\n" " " "-------" "-------" 
    sqlite3 $db 'SELECT COUNT(task) AS records, project 
                 FROM tasks 
                 GROUP BY project
                 ORDER BY project;' |
    awk -F "|" '{printf "%2s %-8s %-20s\n"," ",$1,$2}'
    echo

# List contexts
elif [ $1 == "-ctx" ]
then
    echo
    echo "CONTEXT ("$d")"
    echo
    printf "%2s %-8s %-20s\n" " " "records" "context" 
    printf "%2s %-8s %-20s\n" " " "-------" "-------" 
    sqlite3 $db 'SELECT COUNT(task) as records, context
                 FROM tasks
		 GROUP BY context
		 ORDER BY context;' |
    awk -F "|" '{printf "%2s %-8s %-20s\n"," ",$1,$2}'
    echo

# Structured, first one context 
elif [ $1 == "-lsr" ]
then
    echo
    echo "ALL DUE '$2' TASKS"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task
                 FROM tasks 
   	         WHERE done=0 AND context="'$2'"  
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5}'

# then all other contexts
    echo
    echo "ALL DUE TASKS BUT '$2'"
    echo 
    printf "%5s %5s %3s %-10s %-20s\n" "id" "week" "day" "due" "task" 
    printf "%5s %5s %3s %-10s %-20s\n" "--" "----" "---" "---" "----" 
    sqlite3 $db 'SELECT id,(strftime("%j", date(due,"-3 days","weekday 4"))-1)/7+1,substr("SunMonTueWedThuFriSat",1+3*strftime("%w",due),3),due,task
                 FROM tasks 
   	         WHERE done=0 AND context!="'$2'"  
		 ORDER BY due;' |
    awk -F "|" '{printf "%5i %5s %3s %-10s %-20s\n",$1,$2,$3,$4,$5}'
    echo 

############
# Finished #
############

else
    echo
    echo "For help, see todo --help"
    echo
fi

